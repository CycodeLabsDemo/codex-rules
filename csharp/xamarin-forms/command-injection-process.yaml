rules:
  - id: xamarin-command-injection-process
    message: |
      Process.Start with user-controlled input can lead to command injection.
    severity: ERROR
    languages:
      - csharp
    metadata:
      cwe:
        - "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
      owasp:
        - "A03:2021 - Injection"
      category: security
      technology:
        - xamarin
      references:
        - https://owasp.org/www-project-top-ten/
      labels:
        - command-injection
        - xamarin
        - security
    patterns:
      - patterns:
          - pattern-either:
              - pattern: Process.Start($CMD)
              - pattern: System.Diagnostics.Process.Start($CMD)
              - pattern: ProcessStartInfo($CMD)
              - pattern: $PSI.FileName = $CMD
              - pattern: $PSI.Arguments = $ARGS
          - metavariable-pattern:
              metavariable: $CMD
              pattern-either:
                - pattern: Preferences.Get($KEY, ...)
                - pattern: SecureStorage.GetAsync($KEY)
                - pattern: $USERDATA + $SUFFIX
                - pattern: $"...{$USERDATA}..."
          - pattern-not-inside: |
              var $SAFE = Path.GetFileName($CMD);
              ...
          - pattern-not-inside: |
              var $ALLOWED = new[] { "notepad.exe", "calc.exe" };
              if (!$ALLOWED.Contains($CMD)) return;
              ...
    note: |
      ## Remediation
      Avoid executing system commands with untrusted input.
