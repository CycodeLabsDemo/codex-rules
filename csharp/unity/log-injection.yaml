rules:
  - id: unity-log-injection
    message: |
      Logging untrusted input with Debug.Log may lead to log injection or exposure of sensitive data.
    severity: WARNING
    languages:
      - csharp
    metadata:
      cwe:
        - "CWE-117: Improper Output Neutralization for Logs"
      owasp:
        - "A09:2021 - Security Logging and Monitoring Failures"
      category: security
      technology:
        - unity
      references:
        - https://owasp.org/www-project-top-ten/
      labels:
        - log-injection
        - unity
        - security
    patterns:
      - patterns:
          - pattern-either:
              - pattern: Debug.Log($MSG)
              - pattern: UnityEngine.Debug.Log($MSG)
              - pattern: Debug.LogError($MSG)
              - pattern: Debug.LogWarning($MSG)
              - pattern: Console.WriteLine($MSG)
              # String interpolation in logs
              - pattern: Debug.Log($"...{$DATA}...")
              - pattern: Debug.LogError($"...{$DATA}...")
          - metavariable-pattern:
              metavariable: $MSG
              pattern-either:
                - pattern: PlayerPrefs.GetString($KEY)
                - pattern: $NETWORKDATA + $SUFFIX
                - pattern: $USERDATA.ToString()
                - pattern: $"User input: {$INPUT}"
          - pattern-not-inside: |
              var $CLEAN = SanitizeLogMessage($MSG);
              ...
          - pattern-not-inside: |
              if ($MSG.Contains("\n") || $MSG.Contains("\r")) return;
              ...
    note: |
      ## Remediation
      Sanitize log messages or avoid logging untrusted user input.
