rules:
  - id: unity-sql-injection
    message: |
      Building SQL commands using string concatenation can result in SQL injection.
    severity: ERROR
    languages:
      - csharp
    metadata:
      cwe:
        - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
      owasp:
        - "A03:2021 - Injection"
      category: security
      technology:
        - unity
      references:
        - https://owasp.org/www-project-top-ten/
      labels:
        - sql-injection
        - unity
        - security
    patterns:
      - patterns:
          - pattern-either:
              # Direct string concatenation in SQL
              - pattern: $CONN.CreateCommand().CommandText = $QUERY
              - pattern: new SqliteCommand($QUERY, $CONN)
              - pattern: $CMD.CommandText = $QUERY
              # Unity specific database patterns
              - pattern: $DB.Execute($QUERY)
              - pattern: $DB.Query<$TYPE>($QUERY)
          - metavariable-pattern:
              metavariable: $QUERY
              pattern-either:
                - pattern: $PREFIX + $USERINPUT
                - pattern: $"...{$USERINPUT}..."
                - pattern: string.Format($FMT, $USERINPUT)
                - pattern: string.Concat($PARTS)
          - pattern-not: $CONN.CreateCommand().CommandText = $QUERY, $PARAMS
    note: |
      ## Remediation
      Use parameterized queries or ORM features instead of string concatenation.
