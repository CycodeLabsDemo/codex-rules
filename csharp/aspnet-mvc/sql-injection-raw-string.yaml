rules:
  - id: aspnet-mvc-sql-injection-raw-string
    message: |
      SQL query constructed from user input can lead to SQL injection.
    severity: ERROR
    languages:
      - csharp
    metadata:
      cwe:
        - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
      owasp:
        - "A03:2021 - Injection"
      category: security
      technology:
        - aspnet-mvc
      references:
        - https://owasp.org/www-project-top-ten/
      labels:
        - sql-injection
        - aspnet-mvc
        - security
    patterns:
      - pattern-either:
          # Direct string concatenation in SQL commands
          - patterns:
              - pattern-either:
                  - pattern: new SqlCommand($QUERY + $INPUT, ...)
                  - pattern: new SqlCommand($"...{$INPUT}...", ...)
                  - pattern: $CMD.CommandText = $QUERY + $INPUT
                  - pattern: $CMD.CommandText = $"...{$INPUT}..."
              - pattern-not: new SqlCommand($QUERY, $CONN, $PARAMS)
          # Entity Framework raw SQL with interpolation
          - patterns:
              - pattern-either:
                  - pattern: $CTX.Database.ExecuteSqlCommand($QUERY + $INPUT)
                  - pattern: $CTX.Database.ExecuteSqlCommand($"...{$INPUT}...")
                  - pattern: $CTX.Database.SqlQuery<$TYPE>($QUERY + $INPUT)
                  - pattern: $CTX.Database.SqlQuery<$TYPE>($"...{$INPUT}...")
              - pattern-not: $CTX.Database.ExecuteSqlCommand($QUERY, $PARAMS)
          # Direct concatenation with user input sources
          - patterns:
              - pattern-either:
                  - pattern: SqlCommand($QUERY + Request.$SRC[$KEY])
                  - pattern: SqlCommand($"...{Request.$SRC[$KEY]}...")
              - metavariable-regex:
                  metavariable: $SRC
                  regex: "^(QueryString|Form|Params)$"
    note: |
      ## Remediation
      Use parameterized queries or ORM methods instead of string concatenation.
